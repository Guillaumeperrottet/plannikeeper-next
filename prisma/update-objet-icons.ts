/**
 * Script pour mettre √† jour les objets existants avec des ic√¥nes par d√©faut
 * bas√©es sur leur secteur d'activit√©
 */

import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// Mapping des secteurs vers des ic√¥nes appropri√©es
const SECTOR_TO_ICON_MAPPING: Record<string, string> = {
  // H√¥tellerie et h√©bergement
  h√¥tellerie: "bed",
  hotellerie: "bed",
  hotel: "bed",
  h√¥tel: "bed",
  auberge: "bed",
  g√Æte: "home",
  chambre: "bed",

  // Camping et nature
  camping: "tent",
  camp: "tent",
  caravane: "tent",
  "mobile home": "tent",
  nature: "tree-pine",

  // Restaurant et alimentation
  restaurant: "utensils",
  caf√©: "utensils",
  bar: "utensils",
  brasserie: "utensils",
  cuisine: "utensils",
  alimentation: "utensils",

  // Commerce
  commerce: "store",
  magasin: "store",
  boutique: "store",
  shop: "store",
  vente: "store",

  // R√©sidentiel
  r√©sidentiel: "home",
  maison: "home",
  appartement: "home",
  logement: "home",
  habitation: "home",

  // Transport et automobile
  automobile: "car",
  garage: "car",
  parking: "car",
  transport: "car",

  // Activit√©s aquatiques
  piscine: "waves",
  spa: "waves",
  aquatique: "waves",
  nautique: "waves",

  // Entrep√¥t et stockage
  entrep√¥t: "warehouse",
  stockage: "warehouse",
  logistique: "warehouse",
  d√©p√¥t: "warehouse",

  // √âducation
  √©ducation: "school",
  √©cole: "school",
  formation: "school",
  universit√©: "school",

  // Sant√©
  sant√©: "hospital",
  m√©dical: "hospital",
  clinique: "hospital",
  h√¥pital: "hospital",

  // Immobilier et bureaux
  immobilier: "building",
  bureau: "building",
  entreprise: "building",
  commercial: "building",
};

function getIconFromSecteur(secteur: string): string {
  const secteurLower = secteur.toLowerCase().trim();

  // Recherche exacte d'abord
  if (SECTOR_TO_ICON_MAPPING[secteurLower]) {
    return SECTOR_TO_ICON_MAPPING[secteurLower];
  }

  // Recherche par mots-cl√©s
  for (const [keyword, icon] of Object.entries(SECTOR_TO_ICON_MAPPING)) {
    if (secteurLower.includes(keyword)) {
      return icon;
    }
  }

  // Ic√¥ne par d√©faut
  return "building";
}

async function updateExistingObjetsWithIcons() {
  try {
    console.log("üîÑ D√©marrage de la mise √† jour des ic√¥nes...");

    // R√©cup√©rer tous les objets sans ic√¥ne ou avec ic√¥ne null
    const objets = await prisma.objet.findMany({
      where: {
        OR: [{ icon: null }, { icon: "" }],
      },
      select: {
        id: true,
        nom: true,
        secteur: true,
        icon: true,
      },
    });

    console.log(`üì¶ ${objets.length} objets trouv√©s sans ic√¥ne`);

    if (objets.length === 0) {
      console.log("‚úÖ Tous les objets ont d√©j√† des ic√¥nes !");
      return;
    }

    let updatedCount = 0;

    for (const objet of objets) {
      const suggestedIcon = getIconFromSecteur(objet.secteur);

      await prisma.objet.update({
        where: { id: objet.id },
        data: { icon: suggestedIcon },
      });

      console.log(`‚úÖ ${objet.nom} (${objet.secteur}) -> ${suggestedIcon}`);
      updatedCount++;
    }

    console.log(`üéâ Mise √† jour termin√©e ! ${updatedCount} objets mis √† jour.`);
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  updateExistingObjetsWithIcons()
    .then(() => {
      console.log("üèÅ Script termin√© avec succ√®s");
      process.exit(0);
    })
    .catch((error) => {
      console.error("üí• Erreur fatale:", error);
      process.exit(1);
    });
}

export { updateExistingObjetsWithIcons, getIconFromSecteur };
