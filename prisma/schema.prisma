// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  name             String
  email            String
  organizationId   String?
  emailVerified    Boolean
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  sessions         Session[]
  accounts         Account[]
  OrganizationUser OrganizationUser[]
  Organization     Organization?      @relation(fields: [organizationId], references: [id])
  objectAccess     ObjectAccess[]
  assignedTasks   Task[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  users            User[]
  Objet            Objet[]
  OrganizationUser OrganizationUser[]
  invitationCodes  InvitationCode[]

  @@map("organization")
}

model Objet {
  id             String       @id @default(uuid())
  nom            String
  adresse        String
  secteur        String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  objectAccess   ObjectAccess[]
  sectors         Sector[]

  @@map("objet")
}

model OrganizationUser {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @unique // <--- Ajoute cette contrainte
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           String // ex: "admin", "member"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("organization_user")
}

model InvitationCode {
  id             String       @id @default(uuid())
  code           String       @unique // Un code court et facile à partager
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           String // "admin" ou "member"
  createdBy      String // ID de l'utilisateur qui a créé l'invitation
  createdAt      DateTime     @default(now())
  expiresAt      DateTime
  isUsed         Boolean      @default(false)

  @@map("invitation_code")
}

model ObjectAccess {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  object         Objet    @relation(fields: [objectId], references: [id], onDelete: Cascade)
  objectId       String
  accessLevel    String   // "none", "read", "write", "admin"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, objectId])
  @@map("object_access")
}

model Sector {
  id             String    @id @default(uuid())
  name           String
  image          String?   // URL or path to the image
  imageWidth     Int?      // Nouvelle propriété: largeur originale de l'image
  imageHeight    Int?      // Nouvelle propriété: hauteur originale de l'image
  objectId       String    // Foreign key to Object
  object         Objet     @relation(fields: [objectId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  articles       Article[] // Relation to articles in this sector

  @@map("sector")
}

model Article {
  id             String    @id @default(uuid())
  title          String
  description    String?
  // Coordinates and dimensions for UI display
  positionX      Float?
  positionY      Float?
  width          Float?
  height         Float?
  sectorId       String    // Foreign key to Sector
  sector         Sector    @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  tasks          Task[]    // Relation to tasks for this article

  @@map("article")
}

model Task {
  id                    String    @id @default(uuid())
  name                  String
  description           String?
  executantComment      String?
  done                  Boolean   @default(false)
  realizationDate       DateTime?
  status                String    @default("pending") // pending, in_progress, completed, etc.
  taskType              String?
  color                 String?
  // Recurrence fields
  recurring             Boolean   @default(false)
  period                String?   // daily, weekly, monthly, etc.
  endDate               DateTime?
  recurrenceReminderDate DateTime?
  // Relations
  documents Document[]
  articleId             String    // Foreign key to Article
  article               Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  assignedToId          String?   // Optional foreign key to User
  assignedTo            User?     @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("task")
}

model Document {
  id        String   @id @default(cuid())
  name      String
  filePath  String
  fileSize  Int
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation avec la tâche
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String

  @@index([taskId])
}